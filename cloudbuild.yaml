steps:
  #Criando o container
  - name: "gcr.io/cloud-builders/docker"
    args: ["build", "-t", "gcr.io/gin-23-1/rede-spoty", "."]

  #Enviando-o ao container registry
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "gcr.io/gin-23-1/rede-spoty"]

  #Removendo o serviço do container já instanciado na instancia kubernetes
  - name: "gcr.io/cloud-builders/kubectl"
    args: ["delete", "service", "rede-spoty-service"]
    env:
      [
        "CLOUDSDK_COMPUTE_REGION=us-central1",
        "CLOUDSDK_CONTAINER_CLUSTER=cluster-rede-spoty",
      ]

  #Removendo o deployment do container
  - name: "gcr.io/cloud-builders/kubectl"
    args: ["delete", "deployments", "rede-spoty"]
    env:
      [
        "CLOUDSDK_COMPUTE_REGION=us-central1",
        "CLOUDSDK_CONTAINER_CLUSTER=cluster-rede-spoty",
      ]

  #Atualizando o container criado na instancia Kubernetes
  - name: "gcr.io/cloud-builders/kubectl"
    args:
      [
        "create",
        "deployment",
        "rede-spoty",
        "--image",
        "gcr.io/gin-23-1/rede-spoty:latest",
      ]
    env:
      [
        "CLOUDSDK_COMPUTE_REGION=us-central1",
        "CLOUDSDK_CONTAINER_CLUSTER=cluster-rede-spoty",
      ]

  #Expondo o container criado na instância a um ip externo
  - name: "gcr.io/cloud-builders/kubectl"
    args:
      [
        "expose",
        "deployment",
        "rede-spoty",
        "--name",
        "rede-spoty-service",
        "--type",
        "LoadBalancer",
        "--protocol",
        "TCP",
        "--port",
        "8080",
        "--target-port",
        "8080",
      ]
    env:
      [
        "CLOUDSDK_COMPUTE_REGION=us-central1",
        "CLOUDSDK_CONTAINER_CLUSTER=cluster-rede-spoty",
      ]

  #É necessário instalar e atualizar manualmente via GCP os repositórios do HELM que serão utilizados para monitoramento

options:
  logging: CLOUD_LOGGING_ONLY
